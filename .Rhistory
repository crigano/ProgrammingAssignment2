utils:::menuInstallPkgs()
library(kernlab)
data(spam)
dim(spam)
set.seed(3435)
trainIndicator = rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
trainIndicator
trainIndicator
spam
trainSpam[trainIndicator=1,]
trainSpam= [trainIndicator=1,]
trainSpam = spam[trainIndicator=1,]
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
spam
dim(trainSpam)
save.image("E:\\Documents\\Coursera\\Computing for Data Analysis\\wk2 Data Analysis\\.RData")
q()
names(iris)
h <- hclust(dist(iris[,c(1:4)]))
names(h)
h$order
data_ordered <- iris[h$order,]
head(data_ordered)
svd1 <- svd(data_ordered[,c(1:4)])
names(svd1)
set.seed(12345); par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400),nrow=40)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3),each=5)
}
}
par(mar=rep(0.2,4))
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix)); dataMatrixOrdered <- dataMatrix[hh$order,]
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,,xlab="Row",ylab="Row Mean",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column",ylab="Column Mean",pch=19)
svd1
names(svd1)
svd1$d
utils:::menuInstallPkgs()
reps = c("http://ftp.sunet.se/pub/lang/CRAN",
         "http://cran.gforge.se")
install.packages("Gmisc", repos=reps, dependencies=TRUE)
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
set.seed(12345); 
# Simulate data with a pattern
dataMatrix <- matrix(rnorm(15*160),ncol=15)
colnames(dataMatrix) <- 
  c(paste("Pos.3:", 1:3, sep=" #"), 
    paste("Neg.Decr:", 4:6, sep=" #"), 
    paste("No pattern:", 7:8, sep=" #"),
    paste("Pos.Incr:", 9:11, sep=" #"),
    paste("No pattern:", 12:15, sep=" #"))
for(i in 1:nrow(dataMatrix)){
  # flip a coin
  coinFlip1 <- rbinom(1,size=1,prob=0.5)
  coinFlip2 <- rbinom(1,size=1,prob=0.5)
  coinFlip3 <- rbinom(1,size=1,prob=0.5)
  # if coin is heads add a common pattern to that row
  if(coinFlip1){
    cols <- grep("Pos.3", colnames(dataMatrix))
    dataMatrix[i, cols] <- dataMatrix[i, cols] + 3
  }
  if(coinFlip2){
    cols <- grep("Neg.Decr", colnames(dataMatrix))
    dataMatrix[i, cols] <- dataMatrix[i, cols] - seq(from=5, to=15, length.out=length(cols))
  }
  if(coinFlip3){
    cols <- grep("Pos.Incr", colnames(dataMatrix))
    dataMatrix[i,cols] <- dataMatrix[i,cols] + seq(from=3, to=15, length.out=length(cols))
  }
}
heatmap(dataMatrix, Colv=NA, Rowv=NA, margins=c(7,2), labRow="")
svd_out <- svd(scale(dataMatrix))
library(lattice)
b_clr <- c("steelblue", "darkred")
key <- simpleKey(rectangles = TRUE, space = "top", points=FALSE,
  text=c("Positive", "Negative"))
key$rectangles$col <- b_clr
b1 <- barchart(as.table(svd_out$v[,1]),
  main="First column",
  horizontal=FALSE, col=ifelse(svd_out$v[,1] > 0, 
      b_clr[1], b_clr[2]),
  ylab="Impact value", 
  scales=list(x=list(rot=55, labels=colnames(dataMatrix), cex=1.1)),
  key = key)
b2 <- barchart(as.table(svd_out$v[,2]),
  main="Second column",
  horizontal=FALSE, col=ifelse(svd_out$v[,2] > 0, 
      b_clr[1], b_clr[2]),
  ylab="Impact value", 
  scales=list(x=list(rot=55, labels=colnames(dataMatrix), cex=1.1)),
  key = key)
b3 <- barchart(as.table(svd_out$v[,3]),
  main="Third column",
  horizontal=FALSE, col=ifelse(svd_out$v[,3] > 0, 
      b_clr[1], b_clr[2]),
  ylab="Impact value", 
  scales=list(x=list(rot=55, labels=colnames(dataMatrix), cex=1.1)),
  key = key)
b4 <- barchart(as.table(svd_out$v[,4]),
  main="Fourth column",
  horizontal=FALSE, col=ifelse(svd_out$v[,4] > 0, 
      b_clr[1], b_clr[2]),
  ylab="Impact value", 
  scales=list(x=list(rot=55, labels=colnames(dataMatrix), cex=1.1)),
  key = key)
# Note that the fourth has the no pattern columns as the
# chosen pattern, probably partly because of the previous
# patterns already had been identified
print(b1, position=c(0,0.5,.5,1), more=TRUE)
print(b2, position=c(0.5,0.5,1,1), more=TRUE)
print(b3, position=c(0,0,.5,.5), more=TRUE)
print(b4, position=c(0.5,0,1,.5))
load("./data/face.rda")
image(t(faceData)[,nrow(faceData):1])
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/face.rda",destfile="./data/face.rda"
load("./data/face.rda")
load("face.rda")
download.file("http://spark-public.s3.amazonaws.com/dataanalysis/face.rda",destfile="face.rda")
load("face.rda")
image(t(faceData)[,nrow(faceData):1])
faceData
svd1 <- svd(scale(faceData))
# %*% is matrix multiplication
# Here svd1$d[1] is a constant
approx1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
# In these examples we need to make the diagonal matrix out of d
approx5 <- svd1$u[,1:5] %*% diag(svd1$d[1:5])%*% t(svd1$v[,1:5])
approx10 <- svd1$u[,1:10] %*% diag(svd1$d[1:10])%*% t(svd1$v[,1:10])
names(approx5)
approx5
sdv_out$v[,1]
svd_out <- svd(scale(dataMatrix))
sdv_out$v[,1]
sdv_out
svd_out
name(svd_out)
names(svd_out)
sdv_out$v[,1]>0
svd_out$v[,1]>0
q()
data(warpbreaks)
warpANOVA <- aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
summary(warpANOVA)
log( (0.2 / (1 - 0.2)) )
library(glm2)
utils:::menuInstallPkgs()
library(glm2)
data(crabs)
plot(crabs$Width, crabs$Satellites,
     pch=19, col="darkgrey")
crabsGLM <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
summary(crabsGLM)
exp(crabsGLM$coefficients[[2]])
crabsGLM$coefficients
exp(crabsGLM$coefficients[[1]]) * exp(crabsGLM$coefficients[[2]] * 22)
exp(crabsGLM$coefficients[[1])
crabsGLM$coefficients[[1])
crabsGLM$coefficients[[1]]
lm1 = lm(log(Days + 2.5) ~.,data=quine)
 data(quine)
library(MASS)
data(quine)
lm1 <- lm(log(Days+2.5) ~ ., data=quine)
aic <- step(lm1)
aic$model
q()
utils:::menuInstallPkgs()
install.packages("statnet")
library("statnet")
>install.packages("statnet")
data("florentine")
summary
summary(fomarriage)
summary(flomarriage)
model1 <ergm(flomarriage ~ edges)
model1 <ergm(flomarriage~edges)
model1 <-ergm(flomarriage~edges)
summary(model1)
model2 <- ergm(flomarriage~edges + triangles)
summary(model2)
q()
q()
q()
demo()
q()
ls();
getwd();
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
x <- 1:10
xx <- makeVector(x)
xx$getmean()
xx$setmean(mean(x))
xx$getmean()
q()
